/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Titanium SDK
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
package ti.datadog;

import android.util.Log;

import com.datadog.android.Datadog;
import com.datadog.android.core.configuration.Configuration;
import com.datadog.android.log.Logger;
import com.datadog.android.log.Logs;
import com.datadog.android.log.LogsConfiguration;
import com.datadog.android.okhttp.DatadogInterceptor;
import com.datadog.android.privacy.TrackingConsent;
import com.datadog.android.rum.GlobalRumMonitor;
import com.datadog.android.rum.Rum;
import com.datadog.android.rum.RumConfiguration;
import com.datadog.android.rum.tracking.ViewTrackingStrategy;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.util.TiConvert;

import okhttp3.OkHttpClient;


@Kroll.module(name = "TiDatadog", id = "ti.datadog")
public class TiDatadogModule extends KrollModule {

    private static final String LCAT = "TiDatadogModule";
    @Kroll.constant
    static final int VERBOSITY_INFO = 0;
    @Kroll.constant
    static final int VERBOSITY_DEBUG = 1;
    @Kroll.constant
    static final int VERBOSITY_VERBOSE = 2;

    @Kroll.constant
    static final String LEVEL_DEBUG = "d";
    @Kroll.constant
    static final String LEVEL_INFO = "i";
    @Kroll.constant
    static final String LEVEL_WARNING = "w";
    @Kroll.constant
    static final String LEVEL_ERROR = "e";
    @Kroll.constant
    static final String LEVEL_WTF = "wtf";
    @Kroll.constant
    static final int TRACKING_PENDING = 0;
    @Kroll.constant
    static final int TRACKING_GRANTED = 1;
    @Kroll.constant
    static final int TRACKING_NOT_GRANTED = 2;
    Logger logger;

    public TiDatadogModule() {
        super();
    }

    @Kroll.onAppCreate
    public static void onAppCreate(TiApplication app) {
    }

    // Methods
    @Kroll.method
    public void create(KrollDict opts) {
        String clientToken = opts.getString("clientToken");
        String envName = opts.getString("environment");
        int trackingConsent = opts.getInt("trackingConsent");
        boolean crashReport = TiConvert.toBoolean("crashReport", true);
        
        Configuration configuration = new Configuration.Builder(clientToken, envName)
                .setCrashReportsEnabled(crashReport)
                .build();
        TrackingConsent tc = TrackingConsent.PENDING;
        if (trackingConsent == TRACKING_PENDING) {
            tc = TrackingConsent.PENDING;
        } else if (trackingConsent == TRACKING_GRANTED) {
            tc = TrackingConsent.GRANTED;
        } else if (trackingConsent == TRACKING_NOT_GRANTED) {
            tc = TrackingConsent.NOT_GRANTED;
        }

        Datadog.initialize(TiApplication.getAppRootOrCurrentActivity(), configuration, tc);
        if (Datadog.isInitialized()) {
            fireEvent("initialized", new KrollDict());
        }
    }


    @Kroll.method
    public void enableLogging(KrollDict options) {
        String name = TiConvert.toString(options.get("name"), "titanium");
        float sampleRate = TiConvert.toFloat(options.get("samplingRate"), 100f);

        LogsConfiguration logsConfig = new LogsConfiguration.Builder().build();
        Logs.enable(logsConfig);

        logger = new Logger.Builder()
                .setNetworkInfoEnabled(true)
                .setLogcatLogsEnabled(true)
                .setRemoteSampleRate(sampleRate)
                .setBundleWithTraceEnabled(true)
                .setName(name)
                .build();

    }
    @Kroll.method
    public void enableRumLogging(KrollDict options) {
        String appId = options.getString("appId");
        int longTasks = TiConvert.toInt(options.get("longTasks"), 4000);
        if (appId.equals("")) {
            Log.e(LCAT, "Please set the appId");
            return;
        }
        
        RumConfiguration rumConfig = new RumConfiguration.Builder(appId)
                .trackLongTasks(longTasks)
                .trackUserInteractions()
                .build();
        Rum.enable(rumConfig);
    }

    @Kroll.method
    public void enableNetworkEvents() {
        OkHttpClient okHttpClient = new OkHttpClient.Builder()
                .addInterceptor(new DatadogInterceptor())
                .build();

    }

    @Kroll.method
    public void setUserInfo(String id, String name, String email)
    {
        Datadog.setUserInfo(id, name, email);
    }
    
    @Kroll.method
    public void log(String msg, String level) {
        if (level.equals(LEVEL_DEBUG)) {
            logger.d(msg);
        } else if (level.equals(LEVEL_INFO)) {
            logger.i(msg);
        } else if (level.equals(LEVEL_WARNING)) {
            logger.w(msg);
        } else if (level.equals(LEVEL_ERROR)) {
            logger.e(msg);
        } else if (level.equals(LEVEL_WTF)) {
            logger.wtf(msg);
        }
    }


    @Kroll.setProperty
    public void setVerbosity(int value) {
        if (value == VERBOSITY_INFO) {
            Datadog.setVerbosity(android.util.Log.INFO);
        } else if (value == VERBOSITY_DEBUG) {
            Datadog.setVerbosity(android.util.Log.DEBUG);
        } else if (value == VERBOSITY_VERBOSE) {
            Datadog.setVerbosity(Log.VERBOSE);
        }
    }


}

